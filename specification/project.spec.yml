openapi: 3.1.0
info:
  title: "API сервер для демо-проекта «Шесть городов»"
  description: "«Шесть городов» — это бэкенд демо-проект, разработанный на Node.js, предназначенный для управления и предоставления данных для веб-приложения, посвященного туризму в шести крупнейших городах. Этот проект демонстрирует лучшие практики разработки серверной части веб-приложений, использование RESTful API и интеграцию с базой данных."
  version: "1.0.0"
  contact:
    name: Kirill Oschepkov
    email: kirill.oschepkov03@gmail.com
tags:
  - name: offers
    description: Действия с предложениями
  - name: users
    description: Действия с пользователями
  - name: comments
    description: Действия с комментариями
paths:
  /register:
    post:
      tags:
        - users
      summary: Регистрация пользователя
      description: Регистрирует нового пользователя
      requestBody:
        description: Информация для создания нового пользователя
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        required: true
      responses:
        "201":
          description: Пользователь зарегистрирован. Возвращен объект пользователя.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/user"
                  - properties:
                      id:
                        type: string
                        example: "661bef9f1bdfe1195539b653"
        "400":
          description: Некорректный запрос
        "409":
          description: Пользователь с таким email уже существует.
        "500":
          description: Внутренняя ошибка сервера

  /login:
    get:
      tags:
        - users
      summary: Проверка авторизации пользователя
      description: Возвращает информацию по авторизованному пользователю
      security:
        - Authorization: [ ]
      responses:
        "200":
          description: Пользователь авторизован. Возвращен объект пользователя.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/user"
                  - properties:
                      token:
                        type: string
        "400":
          description: Некорректный запрос
        "401":
          description: Пользователь не авторизован
        "500":
          description: Внутренняя ошибка сервера

    post:
      tags:
        - users
      summary: Авторизует пользователя
      description: Авторизует пользователя по логину и паролю
      requestBody:
        description: Информация для авторизации пользователя (логин, пароль)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginUser'
        required: true
      responses:
        "200":
          description: Пользователь успешно авторизован. Возвращен объект пользователя.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/user"
                  - properties:
                      token:
                        type: string
        "401":
          description: Авторизация не пройдена
        "404":
          description: Пользователь не найден
        "500":
          description: Внутренняя ошибка сервера

  /logout:
    delete:
      tags:
        - users
      summary: Завершение пользовательского сеанса
      description: Завершает текущий сеанс пользователя
      security:
        - Authorization: []
      responses:
        "204":
          description: Успешное завершение сеанса
        "400":
          description: Некорректный токен
        "401":
          description: Пользователь не авторизован
        "500":
          description: Внутренняя ошибка сервера

  /avatar:
    post:
      tags:
        - users
      summary: Загрузить изображение аватара
      description: Загружает изображение аватара пользователя. Изображение аватара должно быть в формате `png` или `jpg`
      security:
        - Authorization: [ ]
      requestBody:
        description: Файл аватара пользователя
        content:
          multipart/form-data:
            schema:
              required:
                - avatarPath
              properties:
                avatarPath:
                  type: string
                  format: binary
                  example: photo.jpg
      responses:
        "201":
          description: Аватар успешно загружен
        "400":
          description: Некорректный запрос
        "404":
          description: Пользователь с указанным id не найден
        "500":
          description: Внутренняя ошибка сервера

  /offers:
    get:
      tags:
        - offers
      summary: Получить список предложений
      description: Возвращает список доступных предложений для аренды
      responses:
        "200":
          description: Список предложений успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offersList'
        "500":
          description: Внутренняя ошибка сервера

    post:
      tags:
        - offers
      summary: Создать новое предложение
      description: Создает новое предложение
      security:
        - Authorization: [ ]
      requestBody:
        description: Информация для создания нового предложения
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createOffer'
        required: true
      responses:
        "201":
          description: Предложение успешно создано. Возвращен объект предложения.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        "400":
          description: Невозможно создать предложение, некорректное тело запроса
        "401":
          description: Пользователь не авторизован
        "500":
          description: Внутренняя ошибка сервера

  /offers/{offerId}:
    get:
      tags:
        - offers
      summary: Получить предложение по идентификатору
      description: Возвращает предложений для аренды по его идентификатору
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Детальная информация о предложении успешно получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        "400":
          description: Неверный запрос
        "404":
          description: Предложение с переданным id не найдено
        "500":
          description: Внутренняя ошибка сервера

    patch:
      tags:
        - offers
      summary: Изменить предложение
      description: Изменяет предложение по идентификатору
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Информация для изменения предложения
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createOffer'
        required: true
      responses:
        "200":
          description: Предложение успешно изменено. Возвращен объект предложения
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        "400":
          description: Неверный запрос.
        "401":
          description: Пользователь не авторизован.
        "403":
          description: Доступ запрещен.
        "404":
          description: Предложение с переданным id не найдено
        "422":
          description: Невозможно изменить предложение, некорректное тело запроса
        "500":
          description: Внутренняя ошибка сервера.

    delete:
      tags:
        - offers
      summary: Удалить предложение
      description: Удалить предложение с заданным id
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Предложение успешно удалено
        "400":
          description: Неверный запрос
        "401":
          description: Пользователь не авторизован
        "403":
          description: Доступ запрещен
        "404":
          description: Предложение с переданным id не найдено
        "500":
          description: Внутренняя ошибка сервера

  /offers/premium:
    get:
      tags:
        - offers
      summary: Получить список премиум-предложений для города
      description: Возвращает список премиум-предложений по аренде для указанного города
      parameters:
        - name: city
          in: query
          required: false
          schema:
            city:
            type: string
            enum:
              - Paris
              - Cologne
              - Brussels
              - Amsterdam
              - Hamburg
              - Dusseldorf
      responses:
        "200":
          description: Список премиальных предложений для города
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offersList'
        "400":
          description: Некорректный запрос
        "500":
          description: Внутренняя ошибка сервера

  /offers/{offerId}/comments:
    get:
      tags:
        - comments
      summary: Получить список комментариев предложения по идентификатору
      description: Возвращает список комментариев для предложения по указанному идентификатору
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Список комментариев для предложения
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commentsList'
        "400":
          description: Некорректный запрос
        "404":
          description: Предложение по указанному идентификатору не найдено
        "500":
          description: Внутренняя ошибка сервера

#    post:
#      tags:
#        - comments
#      summary: Добавить новый комментарий для предложения
#      description: Добавить новый комментарий для предложения с указанным id
#      responses:
#        "201":
#          description: Комментарий успешно добавлен
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/comment'
#        "404":
#          description: Предложение с переданным id не найдено
#        "422":
#          description: Невозможно добавить комментарий, некорректное тело запроса

  /offers/favorites:
    get:
      tags:
        - offers
      summary: Получить список предложений, добавленных в избранное
      description: Возвращает список предложений для аренды, добавленных в избранное
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Список избранных предложений
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offersList'
        "401":
          description: Пользователь не авторизован
        "500":
          description: Внутренняя ошибка сервера

  /offers/favorites/{offerId}:
    post:
      tags:
        - offers
      summary: Добавить предложение в избранные
      description: Добавить предложение с указанным id в избранные
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Предложение успешно добавлено в избранные. Возвращен объект предложения
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/offer"
        "400":
          description: Предложение уже является избранным
        "401":
          description: Пользователь не авторизован
        "404":
          description: Предложение с переданным id не найдено
        "500":
          description: Внутренняя ошибка сервера

    delete:
      tags:
        - offers
      summary: Исключить предложение из избранных
      description: Исключить предложение с указанным id из избранных
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Предложение успешно исключено из избранных
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/offer"
        "400":
          description: Предложение не является избранным
        "401":
          description: Пользователь не авторизован
        "404":
          description: Предложение с переданным id не найдено
        "500":
          description: Внутренняя ошибка сервера

components:
  schemas:
    loginUser:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: example@example.com
        password:
          type: string
          format: password
          example: qwerty123

    createUser:
      type: object
      properties:
        name:
          type: string
          example: Example user
        email:
          type: string
          example: example@example.com
        password:
          type: string
          format: password
          example: qwerty123
        isPro:
          type: boolean
          example: false

    user:
      type: object
      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea
        email:
          type: string
          example: example@examle.com

    createOffer:
      type: object
      properties:
        title:
          type: string
          example: Example offer
        description:
          type: string
          example: Example description about the offer
        city:
          type: string
          enum:
            - Paris
            - Cologne
            - Brussels
            - Amsterdam
            - Hamburg
            - Dusseldorf
          example: Paris
        isPremium:
          type: boolean
          example: false
        houseType:
          type: string
          enum:
            - Apartment
            - House
            - Room
            - Hotel
        countRooms:
          type: integer
          format: int32
          minimum: 1
          maximum: 8
        countGuests:
          type: integer
          format: int32
          minimum: 1
          maximum: 10
        price:
          type: number
          format: int32
          minimum: 100
          maximum: 100000
        goods:
          type: array
          items:
            type: string
            enum:
              - Breakfast
              - Air conditioning
              - Laptop friendly workspace
              - Baby seat
              - Washer
              - Towels
              - Fridge
          example: ['Breakfast', 'Fridge']
        location:
          type: object
          properties:
            latitude:
              type: number
              format: double
            longitude:
              type: number
              format: double

    offersList:
      type: array
      items:
        $ref: '#/components/schemas/offerInList'

    offerInList:
      type: object
      properties:
        title:
          type: string
          example: Example offer
        postDate:
          type: string
          format: date
          example: "2020-01-01"
        city:
          type: string
          enum:
            - Paris
            - Cologne
            - Brussels
            - Amsterdam
            - Hamburg
            - Dusseldorf
          example: Cologne
        preview:
          type: string
          example: example.png
        isPremium:
          type: boolean
        isFavorite:
          type: boolean
        rating:
          type: number
          format: float
          minimum: 1
          maximum: 5
        housingType:
          type: string
        roomsCount:
          type: integer
          format: int32
          minimum: 1
          maximum: 8
        guestsCount:
          type: integer
          format: int32
          minimum: 1
          maximum: 10
        price:
          type: number
          format: int32
          minimum: 100
          maximum: 100000
        authorId:
          type: string
          example: 6329c3d6a04ab1061c6425ea

    offer:
      type: object
      properties:
        title:
          type: string
          example: Example offer
        description:
          type: string
          example: Example description
        postDate:
          type: string
          format: date
          example: "2020-01-01"
        city:
          type: string
          enum:
            - Paris
            - Cologne
            - Brussels
            - Amsterdam
            - Hamburg
            - Dusseldorf
          example: Cologne
        preview:
          type: string
          example: example.png
        pictures:
          type: array
          items:
            type: string
          example:
            - example.png
            - example.jpg
        isPremium:
          type: boolean
        isFavorite:
          type: boolean
        rating:
          type: number
          format: float
          minimum: 1
          maximum: 5
        housingType:
          type: string
        roomsCount:
          type: integer
          format: int32
          minimum: 1
          maximum: 8
        guestsCount:
          type: integer
          format: int32
          minimum: 1
          maximum: 10
        price:
          type: number
          format: int32
          minimum: 100
          maximum: 100000
        facilities:
          type: array
          items:
            type: string
            enum:
              - Breakfast
              - Air conditioning
              - Laptop friendly workspace
              - Baby seat
              - Washer
              - Towels
              - Fridge
        authorId:
          type: string
          example: 6329c3d6a04ab1061c6425ea
        coordinates:
          type: object
          properties:
            latitude:
              type: number
              format: double
            longitude:
              type: number
              format: double

    createComment:
      type: object
      properties:
        text:
          type: string
          minLength: 5
          maxLength: 1024
          example: Example offer

    commentsList:
      type: array
      items:
        $ref: '#/components/schemas/comment'

    comment:
      type: object
      properties:
        text:
          type: string
          minLength: 5
          maxLength: 1024
          example: Example comment
        postDate:
          type: string
          format: date
          example: "2020-03-03"
        rating:
          type: number
          format: float
          minimum: 1
          maximum: 5
        authorId:
          type: string
          example: 6329c3d6a04ab1061c6425ea

  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
      bearerFormat: JWT
      value: "Bearer <JWT-token>"
